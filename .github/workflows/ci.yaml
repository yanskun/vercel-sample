name: CI

env:
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

on: push

defaults:
  run:
    shell: bash
    working-directory: frontend

jobs:
  preview:
    if: ${{ github.ref != 'refs/heads/main'}}
    runs-on: ubuntu-latest
    environment:
      name: preview
      url: ${{ steps.deploy.outputs.url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: ./.github/actions/setup_node
        with:
          working-directory: frontend

      - name: Install Vercel CLI
        # run: pnpm add -g vercel@33.2.0
        run: pnpm add --global vercel

      - name: Add pnpm to PATH
        run: echo "$PNPM_HOME" >> $GITHUB_PATH

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Debug
        run: |
          pwd
          ls -la
          pnpm version
          pnpm --version
          echo $PATH
          which pnpm
          type pnpm

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        id: deploy
        run: |
          vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > deploy.log
          URL=$(cat deploy.log | grep -o 'https://[^ ]*.vercel.app' | head -n1)
          echo "deploymentUrl=$URL" >> $GITHUB_OUTPUT

  # ref: https://github.com/vercel/vercel/discussions/9065#discussioncomment-7384786
  comment:
    runs-on: ubuntu-latest
    needs: preview
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Comment URL to PR
        uses: actions/github-script@v6
        id: comment-deployment-url-script
        env:
          DEPLOYMENT_URL: ${{ needs.preview.outputs.deploymentUrl }}
        with:
          script: |
            // Get pull requests that are open for current ref.
            const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            })

            // Set issue number for following calls from context (if on pull request event) or from above variable.
            const issueNumber = context.issue.number || pullRequests.data[0].number

            // Retrieve existing bot comments for the PR
            const {data: comments} = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
            })
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Deployed at')
            })

            const output = "Deployed at " + process.env.DEPLOYMENT_URL

            // If we have a comment, update it, otherwise create a new one
            if (botComment) {
                github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output
                })
            } else {
                github.rest.issues.createComment({
                    issue_number: issueNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                })
            }
