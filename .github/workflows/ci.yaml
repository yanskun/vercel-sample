name: CI

env:
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

permissions:
  pull-requests: write

on:
  workflow_dispatch:

  push:

defaults:
  run:
    shell: bash
    working-directory: frontend

jobs:
  preview:
    if: ${{ github.ref != 'refs/heads/main'}}
    runs-on: ubuntu-latest
    environment:
      name: preview
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: ./.github/actions/setup_node
        with:
          working-directory: frontend

      - name: Deploy Vercel
        uses: ./.github/actions/vercel
        with:
          token: ${{ secrets.VERCEL_TOKEN }}

      - name: Debug
        run: echo ${{ steps.deploy.outputs.deploymentUrl }}

      - name: Comment URL to PR
        uses: actions/github-script@v6
        id: comment-deployment-url-script
        env:
          DEPLOYMENT_URL: ${{ steps.preview.outputs.deploymentUrl }}
        with:
          script: |
            // Get pull requests that are open for current ref.
            const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            })

            // Set issue number for following calls from context (if on pull request event) or from above variable.
            const issueNumber = context.issue.number || pullRequests.data[0].number

            // Retrieve existing bot comments for the PR
            const {data: comments} = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
            })
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Deployed at')
            })

            const output = "Deployed at " + process.env.DEPLOYMENT_URL

            // If we have a comment, update it, otherwise create a new one
            if (botComment) {
                github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output
                })
            } else {
                github.rest.issues.createComment({
                    issue_number: issueNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                })
            }

  comment:
    needs: preview
    runs-on: ubuntu-latest
    steps:
      - name: Comment URL to PR
        uses: actions/github-script@v6
        id: comment-deployment-url-script
        env:
          DEPLOYMENT_URL: ${{ needs.preview.outputs.deploymentUrl }}
        with:
          script: |
            // Get pull requests that are open for current ref.
            const pullRequests = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
            })

            // Set issue number for following calls from context (if on pull request event) or from above variable.
            const issueNumber = context.issue.number || pullRequests.data[0].number

            // Retrieve existing bot comments for the PR
            const {data: comments} = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issueNumber,
            })
            const botComment = comments.find(comment => {
                return comment.user.type === 'Bot' && comment.body.includes('Deployed at')
            })

            const output = "Deployed at " + process.env.DEPLOYMENT_URL

            // If we have a comment, update it, otherwise create a new one
            if (botComment) {
                github.rest.issues.updateComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: botComment.id,
                    body: output
                })
            } else {
                github.rest.issues.createComment({
                    issue_number: issueNumber,
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    body: output
                })
            }
