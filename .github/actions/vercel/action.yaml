name: Deploy Vercel
description: Deploy to Vercel

inputs:
  token:
    description: 'The Vercel token'
    required: true
  url:
    description: 'The URL to comment on the PR'

runs:
  using: 'composite'

  steps:
    - name: Install Vercel CLI
      shell: bash
      run: pnpm add -g vercel@33.2.0

    - name: Pull Vercel Environment Information
      shell: bash
      run: npx vercel pull --yes --environment=preview --token=${{ inputs.token }}

    - name: Build Project Artifacts
      shell: bash
      run: npx vercel build --token=${{ inputs.token }}

    - name: Deploy Project Artifacts to Vercel
      shell: bash
      id: deploy
      run: |
          npx vercel deploy --prebuilt --token=${{ inputs.token }} > deploy.log
          URL=$(cat deploy.log | grep -o 'https://[^ ]*.vercel.app' | head -n1)
          echo "deploymentUrl=$URL" >> $GITHUB_OUTPUT
    
    - name: Comment URL to PR
      uses: actions/github-script@v6
      id: comment-deployment-url-script
      env:
        DEPLOYMENT_URL: ${{ env.deploymentUrl }}
      with:
        script: |
          // Get pull requests that are open for current ref.
          const pullRequests = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
          })

          // Set issue number for following calls from context (if on pull request event) or from above variable.
          const issueNumber = context.issue.number || pullRequests.data[0].number

          // Retrieve existing bot comments for the PR
          const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issueNumber,
          })
          const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Deployed at')
          })

          const output = "Deployed at " + process.env.DEPLOYMENT_URL

          // If we have a comment, update it, otherwise create a new one
          if (botComment) {
              github.rest.issues.updateComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: botComment.id,
                  body: output
              })
          } else {
              github.rest.issues.createComment({
                  issue_number: issueNumber,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: output
              })
          }



    # - name: Print Deployment URL
    #   if: inputs.url != ''
    #   shell: bash
    #   run: |

    # - name: Deploy Project Artifacts to Vercel
    #   shell: bash
    #   run: echo "DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --token=${{ inputs.token }})"  >> $GITHUB_ENV

    # # Deploy to Vercel Production
    # - name: Pull Vercel Environment Information
    #   shell: bash
    #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #   run: npx vercel pull --yes --environment=production --token=${{ inputs.token }}

    # - name: Build Project Artifacts
    #   shell: bash
    #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #   run: npx vercel build --prod --token=${{ inputs.token }}

    # - name: Deploy Project Artifacts to Vercel
    #   shell: bash
    #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    #   run: echo "DEPLOYMENT_URL=$(npx vercel deploy --prebuilt --prod --token=${{ inputs.token }})"  >> $GITHUB_ENV

    # - name: Show Deployment URL
    #   shell: bash
    #   if: github.ref != 'refs/heads/main'
    #   run: gh pr comment ${{ github.event.pull_request.number }} -b "${{ inputs.url-comment-title }}
    #     ${{ env.DEPLOYMENT_URL }}"
