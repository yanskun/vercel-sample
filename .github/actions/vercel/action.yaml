name: Deploy Vercel
description: Deploy to Vercel

inputs:
  token:
    description: 'The Vercel token'
    required: true

runs:
  using: 'composite'

  steps:
    - name: Install Vercel CLI
      shell: bash
      run: pnpm add -g vercel@33.2.0

    - name: Pull Vercel Environment Information
      shell: bash
      run: npx vercel pull --yes --environment=preview --token=${{ inputs.token }}

    - name: Build Project Artifacts
      shell: bash
      run: npx vercel build --token=${{ inputs.token }}

    - name: Deploy Project Artifacts to Vercel
      shell: bash
      id: deploy
      run: |
          npx vercel deploy --prebuilt --token=${{ inputs.token }} > deploy.log
          URL=$(cat deploy.log | grep -o 'https://[^ ]*.vercel.app' | head -n1)
          echo "deploymentUrl=$URL" >> $GITHUB_OUTPUT

    - name: Comment
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        message: Deployed at ${{ env.deploymentUrl }}
    
    # - name: Comment URL to PR
    #   uses: actions/github-script@v6
    #   id: comment-deployment-url-script
    #   env:
    #     DEPLOYMENT_URL: ${{ env.deploymentUrl }}
    #   with:
    #     script: |
    #       // Get pull requests that are open for current ref.
    #       const pullRequests = await github.rest.pulls.list({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           state: 'open',
    #           head: `${context.repo.owner}:${context.ref.replace('refs/heads/', '')}`
    #       })
    #
    #       // Set issue number for following calls from context (if on pull request event) or from above variable.
    #       const issueNumber = context.issue.number || pullRequests.data[0].number
    #
    #       // Retrieve existing bot comments for the PR
    #       const {data: comments} = await github.rest.issues.listComments({
    #           owner: context.repo.owner,
    #           repo: context.repo.repo,
    #           issue_number: issueNumber,
    #       })
    #       const botComment = comments.find(comment => {
    #           return comment.user.type === 'Bot' && comment.body.includes('Deployed at')
    #       })
    #
    #       const output = "Deployed at " + process.env.DEPLOYMENT_URL
    #
    #       // If we have a comment, update it, otherwise create a new one
    #       if (botComment) {
    #           github.rest.issues.updateComment({
    #               owner: context.repo.owner,
    #               repo: context.repo.repo,
    #               comment_id: botComment.id,
    #               body: output
    #           })
    #       } else {
    #           github.rest.issues.createComment({
    #               issue_number: issueNumber,
    #               owner: context.repo.owner,
    #               repo: context.repo.repo,
    #               body: output
    #           })
    #       }
